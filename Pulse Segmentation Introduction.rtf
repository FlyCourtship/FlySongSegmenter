{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red34\green139\blue34;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs28 \cf2 %SUMMARY:
\fs24 \cf0 \

\fs28 \cf2 % Analyzes the song clip xsong and based on where putativepulse2 identifies
\fs24 \cf0 \

\fs28 \cf2 % putative pulse trains, extracts individual pulses within these clips
\fs24 \cf0 \

\fs28 \cf2 % using wavelet transformation. This is done by computing the continuous wavelet transform
\fs24 \cf0 \

\fs28 \cf2 % of the song clip for the derivative of guassian (DoG) wavelet family,
\fs24 \cf0 \

\fs28 \cf2 % which represent pulses, to those computed for the morlet wavelet,
\fs24 \cf0 \

\fs28 \cf2 % representing sines, and flags events as pulses dependent on if the DoG coefficient was higher. A detailed
\fs24 \cf0 \

\fs28 \cf2 % description follows below.
\fs24 \cf0 \

\fs28 \cf2 % 
\fs24 \cf0 \

\fs28 \cf2 % RETURNS:
\fs24 \cf0 \

\fs28 \cf2 % The structures pulseInfo, pulseInfo2, pcndInfo, and sineseg. The first
\fs24 \cf0 \

\fs28 \cf2 % three provide information about the extracted pulse clips, and the last
\fs24 \cf0 \

\fs28 \cf2 % provides information about the sine clips. pcndInfo and pulseInfo contain
\fs24 \cf0 \

\fs28 \cf2 % information about
\fs24 \cf0 \

\fs28 \cf2 % candidate pulses, while pulseInfo2 contains information about the
\fs24 \cf0 \

\fs28 \cf2 % subset of the candidate pulses that were classified as true
\fs24 \cf0 \

\fs28 \cf2 % pulses. The fields of these structures contain information for
\fs24 \cf0 \

\fs28 \cf2 % each of the pulse clips extracted, e.g. the average energy of the
\fs24 \cf0 \

\fs28 \cf2 % 50'th true pulse is pulseInfo2.aven(50). In particular, the 50'th
\fs24 \cf0 \

\fs28 \cf2 % true pulse itself can be seen by plotting pulseInfo2.x\{50\}. Note
\fs24 \cf0 \

\fs28 \cf2 % that the 'x' field is a cell array since different pulses will
\fs24 \cf0 \

\fs28 \cf2 % have different lengths. The fields of pcndInfo and pulseInfo are listed below:
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % x:    The clip itself.
\fs24 \cf0 \

\fs28 \cf2 % dog: The derivative-of-gaussian wavelet that best matched this
\fs24 \cf0 \

\fs28 \cf2 %      pulse. E.g. if pulseInfo2.dog(10)=2, then the 10'th true pulse 
\fs24 \cf0 \

\fs28 \cf2 %      was best matched by a 2nd derivative of gaussian.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % fcmx: The frequency of the best matched wavelet. This is related in 
\fs24 \cf0 \

\fs28 \cf2 %       a roughly inverse manner to the best matched scale.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % scmx: The scale of the best matched wavelet.
\fs24 \cf0 \

\fs28 \cf2 % i0:   The starting time bin of the pulse clip.
\fs24 \cf0 \

\fs28 \cf2 % i1:   The ending time bin of the pulse clip.
\fs24 \cf0 \

\fs28 \cf2 % wc:   The time bin at which the highest correlation occured.
\fs24 \cf0 \

\fs28 \cf2 % w0:   The starting bin of a window around wc.
\fs24 \cf0 \

\fs28 \cf2 % w1:   The ending bin of a window around wc.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % The distinction between [i0,i1] and [w0 w1] is that [i0 i1] is the local 
\fs24 \cf0 \

\fs28 \cf2 % section whose CWT coefficients for the DoG wavelets exceeded its 
\fs24 \cf0 \

\fs28 \cf2 % coefficients for the morlet wavelets. Although the extent of the pulse
\fs24 \cf0 \

\fs28 \cf2 % overlaps considerably with [i0 i1], it's not necessarily centered on
\fs24 \cf0 \

\fs28 \cf2 % it. Instead, we find the location of the maximum coefficient within 
\fs24 \cf0 \

\fs28 \cf2 % [i0 i1], which we call wc, and define the pulse to be some window [w0 w1]
\fs24 \cf0 \

\fs28 \cf2 % around this location. 
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % pulseInfo2 contains the additional fields 
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % clipped: = 1 if this clip was cut off by the data start or end points.
\fs24 \cf0 \

\fs28 \cf2 % mxv:  The maximum absolute value of the voltage achieved during the clip.
\fs24 \cf0 \

\fs28 \cf2 % aven: The average energy of the clip.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % pcndInfo contains the additional fields
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % comment: The string 'OK' if the clip was accepted, or a short explanation 
\fs24 \cf0 \

\fs28 \cf2 %          of why the clip was rejected.
\fs24 \cf0 \

\fs28 \cf2 % length:  The length of the clip = i1-i0+1.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % PulseSegmentation requires the Wavelet Toolbox and the Signal Processing Toolbox.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % DETAILED DESCRIPTION: 
\fs24 \cf0 \

\fs28 \cf2 % This script attempts to segment putative pulse trains into individual
\fs24 \cf0 \

\fs28 \cf2 % pulses. Its data requirements are the flysong clip (xsong) and the
\fs24 \cf0 \

\fs28 \cf2 % structure pps, which contains the start and stop times and the clips
\fs24 \cf0 \

\fs28 \cf2 % themselves for the putative pulse trains.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % The idea behind pulse segmentation is quite simple: we flag an event as
\fs24 \cf0 \

\fs28 \cf2 % pulse if it looks more like a pulse than a sine!
\fs24 \cf0 \

\fs28 \cf2 % This is done in several steps.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % 1) A typical pulse looks very similar to the Derivative of
\fs24 \cf0 \

\fs28 \cf2 % Gaussian a.k.a. the 'mexican hat' wavelet. A whole family of
\fs24 \cf0 \

\fs28 \cf2 % such funcations can be generated by repeatedly taking
\fs24 \cf0 \

\fs28 \cf2 % derivatives, and the first few members of this family look very
\fs24 \cf0 \

\fs28 \cf2 % similar to observed Drosophila melanogaster courtship song pulses (other species pulses may be better fit by different wavelets and wavelet families). 
\fs24 \cf0 \

\fs28 \cf2 % We use these as our canonical pulse
\fs24 \cf0 \

\fs28 \cf2 % shapes. We then use the Continuous Wavelet Transform (cwt) to
\fs24 \cf0 \

\fs28 \cf2 % correlate the song clip (from pps) with each of these canonical pulse
\fs24 \cf0 \

\fs28 \cf2 % shapes. For each DoG wavelet, we perform the CWT over a range of
\fs24 \cf0 \

\fs28 \cf2 % 'scales'. 'Scale' can be roughly thought of as the inverse of
\fs24 \cf0 \

\fs28 \cf2 % frequency, and sweeping over scale values in effect correlates
\fs24 \cf0 \

\fs28 \cf2 % the song clip with stretched and compressed versions of each
\fs24 \cf0 \

\fs28 \cf2 % pulse shape. This allows us to test a broad range of possible
\fs24 \cf0 \

\fs28 \cf2 % pulse shapes.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % We then repeat the same procedure with the morlet wavelet (sinusoid with
\fs24 \cf0 \

\fs28 \cf2 % a guassian enevelope) over the same range of scales. 
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % 2) Step 1 gives us CWT coefficients for each pulse shape and
\fs24 \cf0 \

\fs28 \cf2 % each scale. In Step 2, we pool the
\fs24 \cf0 \

\fs28 \cf2 % coefficients across the different pulse shapes to find
\fs24 \cf0 \

\fs28 \cf2 % the best-matched shape and scale at each point in time i.e. this
\fs24 \cf0 \

\fs28 \cf2 % will allow us to say that at 2.3 seconds into the clip, the best
\fs24 \cf0 \

\fs28 \cf2 % matched pulse shape was a second order mexican-hat at a frequency
\fs24 \cf0 \

\fs28 \cf2 % of 200 Hz. We do the same thing for the Morlet (sine) wavelet as
\fs24 \cf0 \

\fs28 \cf2 % well. So at the end of this step, instead of having coefficients
\fs24 \cf0 \

\fs28 \cf2 % for each pulse shape and sine shape and for each different scale,
\fs24 \cf0 \

\fs28 \cf2 % we have one set of coefficients representing the best matched
\fs24 \cf0 \

\fs28 \cf2 % pulse shapes, and one set of coefficients representing the best
\fs24 \cf0 \

\fs28 \cf2 % matched sine shapes. Comparing these two allows us to see which
\fs24 \cf0 \

\fs28 \cf2 % fits better.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % 3) Due to the sinusoidal nature of pulses and sines, the results
\fs24 \cf0 \

\fs28 \cf2 % of step 2 will be sinusoidal. Hence in this step we find the
\fs24 \cf0 \

\fs28 \cf2 % peaks of the coefficients and use interp1 to interpolate between
\fs24 \cf0 \

\fs28 \cf2 % them to compute the envelopes.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % 4) At the start of this step we have two envelopes: one for the
\fs24 \cf0 \

\fs28 \cf2 % pulse shaped wavelets and one for the sine shaped wavelets. We
\fs24 \cf0 \

\fs28 \cf2 % then simply compare them and flag the regions in which the pulse
\fs24 \cf0 \

\fs28 \cf2 % shaped wavelets are larger as 'candidate pulse clips'.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \

\fs28 \cf2 % 6) We then 'winnow' the the candidate pulses based on the criteria described below. The pulses that make it through
\fs24 \cf0 \

\fs28 \cf2 % this winnowing procedure are the 'true' pulses, and saved in pulseInfo2.
\fs24 \cf0 \

\fs28 \cf2 %
\fs24 \cf0 \
}